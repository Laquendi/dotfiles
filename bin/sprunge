#!/bin/bash

# Depends on curl, python, python-pygments

usage() {
  cat << HERE
Usage: ${0##*/} [files]

Upload data and fetch URL from http://sprunge.us.
  -h         Show this message
  -t         Default to ?text if no syntax is detected
  -l --lang  Set the language manually
HERE
  exit ${1:-0}
}

options=$(getopt -o hsl: -l help,lang: -- "$@") || usage >&2 1

eval set -- $options
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) usage          ;;
    -t)        L="${L:-text}" ;;
    -l|--lang) L="$2"         ;;

    --) shift; break ;;
    -*) echo >&2 "$0: error - unrecognized option $1"; usage >&2 1 ;;
  esac
  shift
done

sprunge() {
  curl -sF 'sprunge=<-' http://sprunge.us
}

# use python to attempt to detect the lang
pygment() {
  python << CODE
try:
	from pygments.lexers import get_lexer_for_filename
	print(get_lexer_for_filename('$1').aliases[0])
except:
	print('$L')
CODE
}

declare -a urls=()
add() {
  local url="${1/ /}"; [[ -n $2 ]] && url+="?$2"
  echo "$url"; urls+=("$url")
}

if [[ ! -t 0 || $# -eq 0 ]]; then
  # read from stdin
  add $(sprunge) $L
else
  # treat arguments as a list of files to upload
  for file in $@; do
    if [[ ! -f "$file" ]]; then
      echo >&2 "$file isn't a file"
      continue
    fi

    add $(sprunge <"$file") $(pygment "$file")
  done
fi

# send to clipboard if xclip is installed. Don't copy to clipboad
# if output is piped.
if [[ -t 1 ]] && type xclip &>/dev/null; then
  echo -n ${urls[@]} | xclip -sel primary
  echo -n ${urls[@]} | xclip -sel clipboard
fi
