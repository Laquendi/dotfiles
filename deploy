#!/bin/bash

ROOT=$PWD

ALL_OFF="$(tput sgr0)"
BOLD="$(tput bold)"
GREEN="${BOLD}$(tput setaf 2)"
YELLOW="${BOLD}$(tput setaf 3)"
RED="${BOLD}$(tput setaf 1)"
WHITE="${BOLD}$(tput setaf 7)"

err() {
  printf "${RED}error: ${ALL_OFF}${1}\n" >&2
}

warn() {
  printf "${YELLOW}warning: ${ALL_OFF}${1}\n" >&2
}

msg() {
  local mesg=$1; shift
  printf "${GREEN}==> ${WHITE}${mesg}${ALL_OFF}\n" "$*" >&2
}

link() {
  local target="$2"
  [[ -z $2 ]] && target=".${1##*/}" \

  if [[ -e "$target" && ! -h "$target" ]]; then
    warn "$target exists in filesystem"
    return
  fi

  [[ -d "$target" ]] && rm "$target"
  ln -fs "$ROOT/$1" "$target"
}

# Deploy scriptlets {{{1
dotfiles_cower()       { link cower .config/cower;                             }
dotfiles_dircolors()   { link dircolors/dircolors;                             }
dotfiles_fontconfig()  { link fontconfig .config/fontconfig;                   }
dotfiles_git()         { link git/gitconfig;                                   }
dotfiles_gtk2()        { link gtk-2.0/gtkrc-2.0;                               }
dotfiles_gtk3()        { link gtk-3.0 .config/gtk-3.0;                         }
dotfiles_haskell()     { link haskell/haskeline;                               }
dotfiles_htop()        { link htop/htoprc;                                     }
dotfiles_lxdm()        { link lxdm/dmrc;                                       }
dotfiles_ncmpcpp()     { link ncmpcpp;                                         }
dotfiles_mutt()        { link mutt;                                            }
dotfiles_pam()         { link pam/pam_environment;                             }
dotfiles_ranger()      { link ranger .config/ranger;                           }
dotfiles_mpd()         { link mpd/mpd.conf .config/mpd.conf;                   }
dotfiles_systemd()     { link systemd .config/systemd;                         }
dotfiles_termite()     { link termite .config/termite;                         }
dotfiles_tmux()        { link tmux/tmux.conf;                                  }
dotfiles_user-dirs()   { link user-dirs/user-dirs.dirs .config/user-dirs.dirs; }
dotfiles_vimperator()  { link vimperator/vimperatorrc;                         }
dotfiles_weechat()     { link weechat;                                         }
dotfiles_xmonad()      { link xmonad;                                          }

dotfiles_shell() {
  link shell/zshrc
  link shell/zprofile
  link shell/profile
}

dotfiles_vim() {
  link vim
  link vim/vimrc
  link vim/gvimrc
}

dotfiles_X() {
  link X/Xresources
  link X/xinitrc
}
# }}}

dotfiles=($(compgen -A function dotfiles_))

usage() {
  cat << HERE
Automated deploy function for dotfile syncronization.

SUPPORTED:
HERE

  printf '%s\n' ${dotfiles[@]#dotfiles_} | column
  exit ${1:-0}
}

deploy() {
  while (( $# )); do
    local fun=${1#dotfiles_}

    msg "Deploying $fun..."
    if ! declare -f dotfiles_$fun >/dev/null; then
      err "don't know how to deploy \"$1\""
      usage >&2 1
    fi

    (cd $HOME && dotfiles_$fun)
    shift
  done
}

if (( $# == 0 )); then
  deploy ${dotfiles[@]}
elif [[ "$1" =~ -h|--help ]]; then
  usage 0
else
  deploy $*
fi
